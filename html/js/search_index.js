var search_data = {"index":{"searchIndex":["brocade","san","alias","provisioning","agent","error","transaction","replies","switch","error","response","wwn","zone","zoneconfiguration","sshdevice","error","response","abort_transaction()","abortable?()","access_gateways()","active_config()","add_member()","add_member()","add_member()","alias_add()","alias_change()","alias_create()","alias_delete()","alias_purge()","alias_remove()","aliases()","allow_xisl_use()","aptpolicy()","attributes()","cfg_add()","cfg_create()","cfg_delete()","cfg_enable()","cfg_remove()","cfg_transaction()","chassisname()","check_for_running_transaction()","create()","dls()","domain()","effective_configuration()","exist?()","fabric()","fc_router()","find()","find_alias()","find_aliases()","find_by_member()","find_wwn()","find_zone()","find_zones()","firmware()","get()","get_mode()","get_transaction()","id()","interactive_mode()","iod()","ip()","isls()","kernel()","logical_switches()","ls_attributes()","members()","members()","members()","mode()","name()","name()","new()","new()","new()","no_block()","ports()","query()","query()","role()","script_mode()","session()","set_context()","set_mode()","state()","status()","status_details()","supportshow()","switch_beacon()","to_s()","to_s()","to_s()","to_s()","transaction()","trunks()","unknown()","verify_member_name()","verify_member_name()","verify_name()","verify_value()","vf()","wwn()","wwns()","zone_add()","zone_change()","zone_configurations()","zone_create()","zone_delete()","zone_purge()","zone_remove()","zones()","zoning_enabled()","readme"],"longSearchIndex":["brocade","brocade::san","brocade::san::alias","brocade::san::provisioning","brocade::san::provisioning::agent","brocade::san::provisioning::agent::error","brocade::san::provisioning::agent::transaction","brocade::san::provisioning::replies","brocade::san::switch","brocade::san::switch::error","brocade::san::switch::response","brocade::san::wwn","brocade::san::zone","brocade::san::zoneconfiguration","sshdevice","sshdevice::error","sshdevice::response","brocade::san::provisioning::agent#abort_transaction()","brocade::san::provisioning::agent::transaction#abortable?()","brocade::san::switch#access_gateways()","brocade::san::switch#active_config()","brocade::san::alias#add_member()","brocade::san::zone#add_member()","brocade::san::zoneconfiguration#add_member()","brocade::san::provisioning::agent#alias_add()","brocade::san::provisioning::agent#alias_change()","brocade::san::provisioning::agent#alias_create()","brocade::san::provisioning::agent#alias_delete()","brocade::san::provisioning::agent#alias_purge()","brocade::san::provisioning::agent#alias_remove()","brocade::san::switch#aliases()","brocade::san::switch#allow_xisl_use()","brocade::san::switch#aptpolicy()","brocade::san::switch::attributes()","brocade::san::provisioning::agent#cfg_add()","brocade::san::provisioning::agent#cfg_create()","brocade::san::provisioning::agent#cfg_delete()","brocade::san::provisioning::agent#cfg_enable()","brocade::san::provisioning::agent#cfg_remove()","brocade::san::switch#cfg_transaction()","brocade::san::switch#chassisname()","brocade::san::provisioning::agent#check_for_running_transaction()","brocade::san::provisioning::agent::create()","brocade::san::switch#dls()","brocade::san::switch#domain()","brocade::san::switch#effective_configuration()","brocade::san::provisioning::agent#exist?()","brocade::san::switch#fabric()","brocade::san::switch#fc_router()","brocade::san::switch#find()","brocade::san::switch#find_alias()","brocade::san::switch#find_aliases()","brocade::san::switch#find_by_member()","brocade::san::switch#find_wwn()","brocade::san::switch#find_zone()","brocade::san::switch#find_zones()","brocade::san::switch#firmware()","brocade::san::switch#get()","sshdevice#get_mode()","brocade::san::provisioning::agent#get_transaction()","brocade::san::switch#id()","sshdevice#interactive_mode()","brocade::san::switch#iod()","brocade::san::switch#ip()","brocade::san::switch#isls()","brocade::san::switch#kernel()","brocade::san::switch#logical_switches()","brocade::san::switch#ls_attributes()","brocade::san::alias#members()","brocade::san::zone#members()","brocade::san::zoneconfiguration#members()","brocade::san::switch#mode()","brocade::san::switch#name()","brocade::san::wwn#name()","brocade::san::alias::new()","brocade::san::switch::new()","sshdevice::new()","sshdevice::error::no_block()","brocade::san::switch#ports()","brocade::san::switch#query()","sshdevice#query()","brocade::san::switch#role()","sshdevice#script_mode()","sshdevice#session()","brocade::san::switch#set_context()","sshdevice#set_mode()","brocade::san::switch#state()","brocade::san::switch#status()","brocade::san::switch#status_details()","brocade::san::switch#supportshow()","brocade::san::switch#switch_beacon()","brocade::san::alias#to_s()","brocade::san::wwn#to_s()","brocade::san::zone#to_s()","brocade::san::zoneconfiguration#to_s()","brocade::san::provisioning::agent#transaction()","brocade::san::switch#trunks()","brocade::san::switch::error::unknown()","brocade::san::alias::verify_member_name()","brocade::san::zone::verify_member_name()","brocade::san::switch::verify_name()","brocade::san::wwn::verify_value()","brocade::san::switch#vf()","brocade::san::switch#wwn()","brocade::san::switch#wwns()","brocade::san::provisioning::agent#zone_add()","brocade::san::provisioning::agent#zone_change()","brocade::san::switch#zone_configurations()","brocade::san::provisioning::agent#zone_create()","brocade::san::provisioning::agent#zone_delete()","brocade::san::provisioning::agent#zone_purge()","brocade::san::provisioning::agent#zone_remove()","brocade::san::switch#zones()","brocade::san::switch#zoning_enabled()",""],"info":[["Brocade","","Brocade.html","","<p>Brocade namespace\n<p>Brocade namespace\n"],["Brocade::SAN","","Brocade/SAN.html","","<p>SAN namespace\n<p>SAN namespace\n"],["Brocade::SAN::Alias","","Brocade/SAN/Alias.html","","<p>Alias model\n"],["Brocade::SAN::Provisioning","","Brocade/SAN/Provisioning.html","","<p>Provisioning namespace\n"],["Brocade::SAN::Provisioning::Agent","","Brocade/SAN/Provisioning/Agent.html","","<p>Agent class, used for provisioning tasks\n<p>Under development - do not use\n<p>TODO: need to properly test it ...\n"],["Brocade::SAN::Provisioning::Agent::Error","","Brocade/SAN/Provisioning/Agent/Error.html","","<p>Class that holds Agent::Error messages\n"],["Brocade::SAN::Provisioning::Agent::Transaction","","Brocade/SAN/Provisioning/Agent/Transaction.html","","<p>simple Transaction class that processes Switch#cfg_transaction output\n<p>Value of <code>id</code> means:\n<p>:id &mdash; -1 - no transaction ...\n"],["Brocade::SAN::Provisioning::Replies","","Brocade/SAN/Provisioning/Replies.html","","<p>holds replies strings as constants\n"],["Brocade::SAN::Switch","","Brocade/SAN/Switch.html","","<p>Class to model SAN switch from Brocade\n"],["Brocade::SAN::Switch::Error","","Brocade/SAN/Switch/Error.html","","<p>class extending SshDevice::Error\n"],["Brocade::SAN::Switch::Response","","Brocade/SAN/Switch/Response.html","","<p>class extending SshDevice::Response\n"],["Brocade::SAN::Wwn","","Brocade/SAN/Wwn.html","","<p>Wwn model\n"],["Brocade::SAN::Zone","","Brocade/SAN/Zone.html","","<p>Zone model\n"],["Brocade::SAN::ZoneConfiguration","","Brocade/SAN/ZoneConfiguration.html","","<p>Zone Configuration model\n"],["SshDevice","","SshDevice.html","","<p>Basic wrapper class that runs SSH queries on the device and returns\nResponse\n<p>It is used to extend further ...\n"],["SshDevice::Error","","SshDevice/Error.html","","<p>Class using for raising specific errors\n"],["SshDevice::Response","","SshDevice/Response.html","","<p>This class defines the device response and it should not be manipulated\ndirectly Only exception is direct ...\n"],["abort_transaction","Brocade::SAN::Provisioning::Agent","Brocade/SAN/Provisioning/Agent.html#method-i-abort_transaction","()","<p>returns <code>true</code> if transaction was aborted and <code>false</code>\nif there was no transaction to abort and raises error ...\n"],["abortable?","Brocade::SAN::Provisioning::Agent::Transaction","Brocade/SAN/Provisioning/Agent/Transaction.html#method-i-abortable-3F","()","<p>Returns abortable flag\n"],["access_gateways","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-access_gateways","","<p>If called with <code>true</code> argument it will get the ag from the\nswitch instead of cache\n<p>Returns value in (array) ...\n"],["active_config","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-active_config","","<p>If called with <code>true</code> argument it will get the active_config\nfrom the switch instead of cache\n<p>Returns value ...\n"],["add_member","Brocade::SAN::Alias","Brocade/SAN/Alias.html#method-i-add_member","(member)","<p>add new member to the alias\n<p>members of aliases are WWNs or Domain,Index port notation\n<p><code>member</code> is name of ...\n"],["add_member","Brocade::SAN::Zone","Brocade/SAN/Zone.html#method-i-add_member","(member)","<p>add member to the object members of zones are aliases, wwns or D,I notation\n<code>member</code> is name of the member ...\n"],["add_member","Brocade::SAN::ZoneConfiguration","Brocade/SAN/ZoneConfiguration.html#method-i-add_member","(member)","<p>add member to the object members of zone configurations are zones\n<code>member</code> is name of the zone\n"],["alias_add","Brocade::SAN::Provisioning::Agent","Brocade/SAN/Provisioning/Agent.html#method-i-alias_add","(al,member)","<p>Adds alias member to alias\n<p>If started outside transaction block it runs as single command transaction,\n...\n"],["alias_change","Brocade::SAN::Provisioning::Agent","Brocade/SAN/Provisioning/Agent.html#method-i-alias_change","(al)","<p>Changes alias and saves config\n<p>If started outside transaction block it runs as single command transaction,\n...\n"],["alias_create","Brocade::SAN::Provisioning::Agent","Brocade/SAN/Provisioning/Agent.html#method-i-alias_create","(al)","<p>Creates alias and saves config\n<p>If started outside transaction block it runs as single command transaction,\n...\n"],["alias_delete","Brocade::SAN::Provisioning::Agent","Brocade/SAN/Provisioning/Agent.html#method-i-alias_delete","(al)","<p>Deletes alias and saves config\n<p>If started outside transaction block it runs as single command transaction,\n...\n"],["alias_purge","Brocade::SAN::Provisioning::Agent","Brocade/SAN/Provisioning/Agent.html#method-i-alias_purge","(al)","<p>Purges the Alias <code>al</code> completely, along with all references.\n<p><code>al</code> must be instance of Alias.\n<p>The method first ...\n"],["alias_remove","Brocade::SAN::Provisioning::Agent","Brocade/SAN/Provisioning/Agent.html#method-i-alias_remove","(al,member)","<p>Removes member from alias <code>al</code>\n<p>If started outside transaction block it runs as single command transaction,\n...\n"],["aliases","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-aliases","(forced=false)","<p>returns all zones defined on the switch as array of Alias\n"],["allow_xisl_use","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-allow_xisl_use","","<p>If called with <code>true</code> argument it will get the allow_xisl_use\nfrom the switch instead of cache\n<p>Returns value ...\n"],["aptpolicy","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-aptpolicy","","<p>If called with <code>true</code> argument it will get the current_policy\nfrom the switch instead of cache\n<p>Returns value ...\n"],["attributes","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-c-attributes","(args)","<p>Used to dynamically create named methods based on CMD_MAPPING\n"],["cfg_add","Brocade::SAN::Provisioning::Agent","Brocade/SAN/Provisioning/Agent.html#method-i-cfg_add","(cfg,member)","<p>Adds zone cofiguration member to zone configuration.\n<p>If started outside transaction block it runs as single ...\n"],["cfg_create","Brocade::SAN::Provisioning::Agent","Brocade/SAN/Provisioning/Agent.html#method-i-cfg_create","(cfg)","<p>Creates zone configuration and saves fabric configuration.\n<p>If started outside transaction block it runs ...\n"],["cfg_delete","Brocade::SAN::Provisioning::Agent","Brocade/SAN/Provisioning/Agent.html#method-i-cfg_delete","(cfg)","<p>Removes zone configuration and saves fabric configuration.\n<p>If started outside transaction block it runs ...\n"],["cfg_enable","Brocade::SAN::Provisioning::Agent","Brocade/SAN/Provisioning/Agent.html#method-i-cfg_enable","(cfg)","<p>Enables zoning configuration <code>cfg</code>.\n<p><code>cfg</code> must be ZoneConfiguration instance, will only use it's\nname and ...\n"],["cfg_remove","Brocade::SAN::Provisioning::Agent","Brocade/SAN/Provisioning/Agent.html#method-i-cfg_remove","(cfg,member)","<p>Remove zone <code>member</code> from configuration <code>cfg</code>.\n<p>If started outside transaction block it runs as single command ...\n"],["cfg_transaction","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-cfg_transaction","","<p>If called with <code>true</code> argument it will get the cfg_transaction\nfrom the switch instead of cache\n<p>Returns ...\n"],["chassisname","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-chassisname","","<p>If called with <code>true</code> argument it will get the chassisname from\nthe switch instead of cache\n<p>Returns value ...\n"],["check_for_running_transaction","Brocade::SAN::Provisioning::Agent","Brocade/SAN/Provisioning/Agent.html#method-i-check_for_running_transaction","()","<p>Check if there is different zoning transaction in progress.\n<p>Returns <code>true</code> or <code>false</code>.\n<p>if started in within ...\n"],["create","Brocade::SAN::Provisioning::Agent","Brocade/SAN/Provisioning/Agent.html#method-c-create","(*params)","<p>Creates a Brocade::SAN::Provisioning::Agent instance, tests a connection\nand test if user has enough ...\n"],["dls","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-dls","","<p>If called with <code>true</code> argument it will get the dlsshow from the\nswitch instead of cache\n<p>Returns value in ...\n"],["domain","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-domain","","<p>If called with <code>true</code> argument it will get the switch_domain\nfrom the switch instead of cache\n<p>Returns value ...\n"],["effective_configuration","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-effective_configuration","(full=false,forced=false)","<p>Returns effective ZoneConfiguration\n<p>If <code>full</code> is set to true it loads full effective configuration\nwith ...\n"],["exist?","Brocade::SAN::Provisioning::Agent","Brocade/SAN/Provisioning/Agent.html#method-i-exist-3F","(str,opts={})","<p>Checks if object exists in fabric. Finds even objects not stored in memory\nbut as well object created ...\n"],["fabric","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-fabric","(forced=false)","<p>returns switches in the fabric in hash form\n"],["fc_router","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-fc_router","","<p>If called with <code>true</code> argument it will get the fc_router from\nthe switch instead of cache\n<p>Returns value ...\n"],["find","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-find","(str,opts={})","<p>finds configuration object by <code>str</code>. Case insensitive. If the\n<code>object</code> option is not specified it searches ...\n"],["find_alias","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-find_alias","(str)","<p>returns Alias with name of <code>str</code> if exists, <code>nil</code>\notherwise\n"],["find_aliases","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-find_aliases","(regexp)","<p>returns Alias array of Aliases with name matching <code>regexp</code> if\nexists, [] otherwise\n<p>find is case insesitive ...\n"],["find_by_member","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-find_by_member","(str,opts={})","<p>finds configuration objects that have member specified by <code>str</code>.\nCase insensitive. If the <code>object</code> option ...\n"],["find_wwn","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-find_wwn","(value,forced=true,opts={:fabric_wide=>false})","<p>returns WWN of given <code>value</code> if exists, <code>nil</code> if not\n<p>if <code>forced</code> is true it will load the data from switch instead\n...\n"],["find_zone","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-find_zone","(str)","<p>returns Zone with name of <code>str</code> if exists, <code>nil</code>\notherwise\n"],["find_zones","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-find_zones","(regexp)","<p>returns Zone array of Zones with name matching <code>regexp</code> if\nexists, [] otherwise\n<p>find is case insesitive ...\n"],["firmware","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-firmware","","<p>If called with <code>true</code> argument it will get the fabric_os from\nthe switch instead of cache\n<p>Returns value ...\n"],["get","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-get","(attr,forced=false)","<p>gets the <code>attr</code>\n<p><code>attr</code> has to be speficied in the CMD_MAPPING\n<p>named methods are wrappers around this method ...\n"],["get_mode","SshDevice","SshDevice.html#method-i-get_mode","()","<p>get current query mode\n<p>returns either <code>interactive</code> or <code>script</code>\n<p>default mode is <code>script</code>\n"],["get_transaction","Brocade::SAN::Provisioning::Agent","Brocade/SAN/Provisioning/Agent.html#method-i-get_transaction","()","<p>Queries the agent for ongoing transaction.\n<p>Retruns Transaction instance or false if there is no transaction ...\n"],["id","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-id","","<p>If called with <code>true</code> argument it will get the switch_id from\nthe switch instead of cache\n<p>Returns value ...\n"],["interactive_mode","SshDevice","SshDevice.html#method-i-interactive_mode","(&block)","<p>Defines a block of code to run in interactive mode\n<p>the mode will be reverted back to initial mode after ...\n"],["iod","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-iod","","<p>If called with <code>true</code> argument it will get the iodshow from the\nswitch instead of cache\n<p>Returns value in ...\n"],["ip","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-ip","","<p>If called with <code>true</code> argument it will get the ip_address from\nthe switch instead of cache\n<p>Returns value ...\n"],["isls","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-isls","","<p>If called with <code>true</code> argument it will get the isl_links from\nthe switch instead of cache\n<p>Returns value ...\n"],["kernel","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-kernel","","<p>If called with <code>true</code> argument it will get the kernel from the\nswitch instead of cache\n<p>Returns value in ...\n"],["logical_switches","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-logical_switches","","<p>If called with <code>true</code> argument it will get the created_switches\nfrom the switch instead of cache\n<p>Returns ...\n"],["ls_attributes","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-ls_attributes","","<p>If called with <code>true</code> argument it will get the ls_attributes\nfrom the switch instead of cache\n<p>Returns value ...\n"],["members","Brocade::SAN::Alias","Brocade/SAN/Alias.html#method-i-members","()","<p>returns array of members\n"],["members","Brocade::SAN::Zone","Brocade/SAN/Zone.html#method-i-members","()","<p>returns array of members\n"],["members","Brocade::SAN::ZoneConfiguration","Brocade/SAN/ZoneConfiguration.html#method-i-members","()","<p>returns array of members\n"],["mode","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-mode","","<p>If called with <code>true</code> argument it will get the switch_mode from\nthe switch instead of cache\n<p>Returns value ...\n"],["name","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-name","","<p>If called with <code>true</code> argument it will get the switch_name from\nthe switch instead of cache\n<p>Returns value ...\n"],["name","Brocade::SAN::Wwn","Brocade/SAN/Wwn.html#method-i-name","()","<p>shadows value\n"],["new","Brocade::SAN::Alias","Brocade/SAN/Alias.html#method-c-new","(name,opts={})","<p>inititialize new alias with <code>name</code>\n<p><code>opts</code> reserved for future use\n"],["new","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-c-new","(*params)","<p>Creates a Switch instance and tests a connection.\n<p>Checks as well if the switch is virtual fabric enabled ...\n"],["new","SshDevice","SshDevice.html#method-c-new","(address,user,password,opts={})","<p>Initialization method\n<p><code>opts</code> can be:\n<p>:interactive &mdash; <code>true</code> / <code>false</code> will use interactive query can be\nset later ...\n"],["no_block","SshDevice::Error","SshDevice/Error.html#method-c-no_block","()",""],["ports","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-ports","","<p>If called with <code>true</code> argument it will get the ports from the\nswitch instead of cache\n<p>Returns value in (array) ...\n"],["query","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-query","(*cmds)","<p>query calls SshDevice#query but first iject vf context related command into\nthe commands\n"],["query","SshDevice","SshDevice.html#method-i-query","(*cmds)","<p>Queries <code>cmds</code> commands directly.  This method is to be used to\nimplement higlevel API  or  to do more ...\n"],["role","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-role","","<p>If called with <code>true</code> argument it will get the switch_role from\nthe switch instead of cache\n<p>Returns value ...\n"],["script_mode","SshDevice","SshDevice.html#method-i-script_mode","(&block)","<p>Defines a block of code to run in script mode\n<p>the mode will be reverted back to initial mode after leaving ...\n"],["session","SshDevice","SshDevice.html#method-i-session","(&block)","<p>Opens a session block\n<p>All queries within the session block use the same connection. This speeds\nup the ...\n"],["set_context","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-set_context","(fid=128)","<p>Sets the FID of the switch to be queried and clears cache.  Next queries\nwill be done directly on switch. ...\n"],["set_mode","SshDevice","SshDevice.html#method-i-set_mode","(mode)","<p>sets current query mode\n<p><code>mode</code>: interactive or script\n<p>interactive - used to do interactive queries in scripted ...\n"],["state","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-state","","<p>If called with <code>true</code> argument it will get the switch_state from\nthe switch instead of cache\n<p>Returns value ...\n"],["status","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-status","","<p>If called with <code>true</code> argument it will get the switch_state from\nthe switch instead of cache\n<p>Returns value ...\n"],["status_details","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-status_details","","<p>If called with <code>true</code> argument it will get the switchstatusshow\nfrom the switch instead of cache\n<p>Returns ...\n"],["supportshow","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-supportshow","","<p>If called with <code>true</code> argument it will get the supportshow from\nthe switch instead of cache\n<p>Returns value ...\n"],["switch_beacon","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-switch_beacon","","<p>If called with <code>true</code> argument it will get the switch_beacon\nfrom the switch instead of cache\n<p>Returns value ...\n"],["to_s","Brocade::SAN::Alias","Brocade/SAN/Alias.html#method-i-to_s","()",""],["to_s","Brocade::SAN::Wwn","Brocade/SAN/Wwn.html#method-i-to_s","()",""],["to_s","Brocade::SAN::Zone","Brocade/SAN/Zone.html#method-i-to_s","()",""],["to_s","Brocade::SAN::ZoneConfiguration","Brocade/SAN/ZoneConfiguration.html#method-i-to_s","()",""],["transaction","Brocade::SAN::Provisioning::Agent","Brocade/SAN/Provisioning/Agent.html#method-i-transaction","()","<p>Opens a provisioning transaction.\n<p>Transaction runs in 1 session.\n<p>Command allows transaction within transaction. ...\n"],["trunks","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-trunks","","<p>If called with <code>true</code> argument it will get the trunk_links from\nthe switch instead of cache\n<p>Returns value ...\n"],["unknown","Brocade::SAN::Switch::Error","Brocade/SAN/Switch/Error.html#method-c-unknown","()",""],["verify_member_name","Brocade::SAN::Alias","Brocade/SAN/Alias.html#method-c-verify_member_name","(str)","<p>verifies if <code>str</code> matches convetion defined in\nAlias::MEMBER_RULE\n<p>raises Switch::Error: Incorrect name format ...\n"],["verify_member_name","Brocade::SAN::Zone","Brocade/SAN/Zone.html#method-c-verify_member_name","(str)","<p>verifies if <code>str</code> matches convetion defined in Zone::MEMBER_RULE\nraises Switch::Error: Incorrect name format ...\n"],["verify_name","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-c-verify_name","(name)","<p>verifies if name matches convetion defined in NAME_RULE raises\nSwitch::Error: Incorrect name format if ...\n"],["verify_value","Brocade::SAN::Wwn","Brocade/SAN/Wwn.html#method-c-verify_value","(str)","<p>verifies if <code>str</code> matches convetion defined in Wwn::VALUE_RULE\nraises Switch::Error: Incorrect value format ...\n"],["vf","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-vf","(forced=false)","<p>If called with <code>true</code> argument it will get the virtual_fabric\nfrom the switch instead of cache\n<p>Returns value ...\n"],["wwn","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-wwn","","<p>If called with <code>true</code> argument it will get the switch_wwn from\nthe switch instead of cache\n<p>Returns value ...\n"],["wwns","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-wwns","(forced=false,mode=:local)","<p>returns all WWNs\n<p><code>mode</code>\n<p>:local &mdash; returns all local WWNs\n"],["zone_add","Brocade::SAN::Provisioning::Agent","Brocade/SAN/Provisioning/Agent.html#method-i-zone_add","(zone,member)","<p>Adds zone <code>member</code> to <code>zone</code>.\n<p>If started outside transaction block it runs as single command transaction,\n...\n"],["zone_change","Brocade::SAN::Provisioning::Agent","Brocade/SAN/Provisioning/Agent.html#method-i-zone_change","(zone)","<p>Changes <code>zone</code> and saves config.\n<p>If started outside transaction block it runs as single command transaction,\n...\n"],["zone_configurations","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-zone_configurations","(full=false,forced=false)","<p>Returns ZoneConfigurations array\n<p>If <code>full</code> is set to true it loads full configurations with zones\nand aliases, ...\n"],["zone_create","Brocade::SAN::Provisioning::Agent","Brocade/SAN/Provisioning/Agent.html#method-i-zone_create","(zone)","<p>Creates <code>zone</code> and saves config.\n<p>If started outside transaction block it runs as single command transaction,\n...\n"],["zone_delete","Brocade::SAN::Provisioning::Agent","Brocade/SAN/Provisioning/Agent.html#method-i-zone_delete","(zone)","<p>Removes <code>zone</code> and saves config.\n<p>If started outside transaction block it runs as single command transaction,\n...\n"],["zone_purge","Brocade::SAN::Provisioning::Agent","Brocade/SAN/Provisioning/Agent.html#method-i-zone_purge","(zone)","<p>Purges the Zone <code>zone</code> completely, along with all references.\n<p><code>zone</code> must me instance of Zone. The method ...\n"],["zone_remove","Brocade::SAN::Provisioning::Agent","Brocade/SAN/Provisioning/Agent.html#method-i-zone_remove","(zone,member)","<p>Remove <code>member</code> from <code>zone</code>.\n<p>If started outside transaction block it runs as single command transaction,\notherwise ...\n"],["zones","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-zones","(forced=false)","<p>returns all zones defined on the switch as array of Zone\n"],["zoning_enabled","Brocade::SAN::Switch","Brocade/SAN/Switch.html#method-i-zoning_enabled","","<p>If called with <code>true</code> argument it will get the zoning_enabled\nfrom the switch instead of cache\n<p>Returns value ...\n"],["README","","README.html","","<p>BrocadeSAN\n<p>What is BrocadeSAN?\n<p>BrocadeSAN provides a simple API to communicate with Brocade SAN switches\n...\n"]]}}